plugins {
    id 'java'
}

group 'com.axway'
version '1.0.1'
sourceCompatibility = 1.8

// Melhoria: Sistema de build otimizado para Docker
// - Suporte aprimorado para ambiente containerizado
// - Configura√ß√£o autom√°tica de depend√™ncias Axway
// - Build consistente entre ambientes
// - Sistema de release autom√°tico com permiss√µes corrigidas
// - Workflow de release otimizado para usar artifacts
// - Release criado diretamente no workflow build-jar
// - Sistema de release unificado funcionando corretamente
// - Workflow YAML corrigido e funcionando
// - Sistema robusto para lidar com tags existentes
// - Action de release atualizada para vers√£o moderna
// - Sistema de detec√ß√£o autom√°tica de vers√£o AWS SDK implementado
// - Detec√ß√£o de JAR corrigida e configura√ß√£o simplificada
// - Problema de permiss√£o ao renomear JAR corrigido
// - Versionamento autom√°tico implementado
// - Release √∫nica com m√∫ltiplos JARs implementada
// - GH_TOKEN adicionado para autentica√ß√£o do GitHub CLI

repositories {
    mavenCentral()
}

// Configura√ß√£o din√¢mica do Axway API Gateway
// Melhoria: Suporte aprimorado para m√∫ltiplas vers√µes do Axway
def axway_base = System.getProperty('axway.base', '/opt/axway/Axway-7.7.0.20240830')
def apim_folder = "${axway_base}/apigateway/system"
def ps_folder = "${axway_base}/policystudio"

// Configura√ß√µes alternativas (descomente se necess√°rio)
//def axway_base_alt = '/opt/axway/Axway-7.7.0.20210830'
//def apim_folder_alt = "${axway_base_alt}/apigateway/system"
//def ps_folder_alt = "${axway_base_alt}/policystudio"

dependencies {
    // Configura√ß√£o din√¢mica de depend√™ncias baseada no Axway
    def useAxwayAwsSdk = System.getProperty('use.axway.aws.sdk', 'true').toBoolean()
    def fallbackAwsSdkVersion = System.getProperty('fallback.aws.sdk.version', '1.12.314')
    
    if (useAxwayAwsSdk) {
        // Usar AWS SDK do Axway (recomendado)
        println "üîç Usando AWS SDK do Axway: ${apim_folder}/lib"
        
        // Verificar se AWS SDK est√° dispon√≠vel no Axway
        def awsSdkJars = fileTree(dir: "${apim_folder}/lib", include: '*aws*.jar')
        def awsSdkModulesJars = fileTree(dir: "${apim_folder}/lib/modules/aws", include: '*.jar')
        
        if (awsSdkJars.files.size() > 0 || awsSdkModulesJars.files.size() > 0) {
            println "‚úÖ AWS SDK encontrado no Axway: ${awsSdkJars.files.size() + awsSdkModulesJars.files.size()} JARs"
            implementation awsSdkJars
            implementation awsSdkModulesJars
            
            // Detectar vers√£o do AWS SDK do Axway
            def detectedVersion = null
            awsSdkModulesJars.files.each { jar ->
                def matcher = jar.name =~ /aws-java-sdk-.*-(\d+\.\d+\.\d+)\.jar/
                if (matcher.find() && !detectedVersion) {
                    detectedVersion = matcher.group(1)
                    println "üîç Vers√£o detectada do AWS SDK: $detectedVersion"
                }
            }
            
            // Verificar se AWS SDK Lambda est√° dispon√≠vel
            def awsLambdaJar = awsSdkModulesJars.files.find { it.name.contains('lambda') }
            if (!awsLambdaJar) {
                def lambdaVersion = detectedVersion ?: fallbackAwsSdkVersion
                println "‚ö†Ô∏è  AWS SDK Lambda n√£o encontrado no Axway, adicionando externo: $lambdaVersion"
                implementation group: 'com.amazonaws', name: 'aws-java-sdk-lambda', version: lambdaVersion
            }
        } else {
            println "‚ö†Ô∏è  AWS SDK n√£o encontrado no Axway, usando fallback: $fallbackAwsSdkVersion"
            implementation group: 'com.amazonaws', name: 'aws-java-sdk-lambda', version: fallbackAwsSdkVersion
            implementation group: 'com.amazonaws', name: 'aws-java-sdk-core', version: fallbackAwsSdkVersion
        }
    } else {
        // Usar AWS SDK externo (fallback)
        println "üîß Usando AWS SDK externo: $fallbackAwsSdkVersion"
        implementation group: 'com.amazonaws', name: 'aws-java-sdk-lambda', version: fallbackAwsSdkVersion
        implementation group: 'com.amazonaws', name: 'aws-java-sdk-core', version: fallbackAwsSdkVersion
    }
    
    // Axway API Gateway libs
    implementation fileTree( dir: "${apim_folder}/lib", include: '*.jar')
    implementation fileTree(dir: "${apim_folder}/lib/modules", include: '*.jar')
    implementation fileTree(dir: "${apim_folder}/lib/plugins", include: '*.jar')
    
    // Policy Studio libs
    implementation fileTree(dir: "${ps_folder}/plugins", include: '*.jar')
    implementation files("${ps_folder}/plugins/com.vordel.rcp.filterbase_7.7.0.v20241023-0911")
}

// Task para instala√ß√£o no Linux
task installLinux(type: Exec) {
    group = 'Installation'
    description = 'Instala o filtro AWS Lambda no Linux'
    
    dependsOn build
    
    commandLine 'bash', 'scripts/linux/install-filter.sh'
    
    doFirst {
        println "üöÄ Instalando filtro AWS Lambda no Linux..."
        println "üìÅ JAR: build/libs/aws-lambda-apim-sdk-1.0.1.jar"
        println "üìÅ Gateway: ${axway_base}"
    }
}

// Task para instala√ß√£o no Windows (apenas arquivos YAML)
task installWindows {
    group = 'Installation'
    description = 'Instala apenas os arquivos YAML no Windows (sem build do JAR)'
    
    doFirst {
        println "üìã Nota: O JAR deve ser buildado no Linux e copiado manualmente"
        println ""
        println "üìÇ Exemplos de projetos Policy Studio:"
        println "   C:\\Users\\jbarros\\apiprojects\\DIGIO-POC-AKS"
        println "   C:\\Users\\jbarros\\apiprojects\\POC-CUSTOM-FILTER"
        println "   C:\\Projects\\API-Gateway\\MyProject"
        println ""
        
        // Solicitar caminho do projeto Policy Studio
        def projectPath = System.console()?.readLine("üìÇ Digite o caminho do projeto Policy Studio: ")
        
        if (!projectPath) {
            throw new GradleException("‚ùå Caminho do projeto n√£o informado!")
        }
        
        // Usar fun√ß√£o auxiliar para instalar arquivos YAML
        installYamlFiles(projectPath, "installWindows")
    }
}

// Fun√ß√£o auxiliar para processar arquivo de internacionaliza√ß√£o
def processInternationalizationFile(def sourceFile, def destFile) {
    if (!sourceFile.exists()) {
        println "‚ùå Arquivo n√£o encontrado: ${sourceFile.absolutePath}"
        return false
    }
    
    def sourceContent = sourceFile.text.trim()
    def destContent = destFile.exists() ? destFile.text : ""
    
    // Verificar se o filtro AWSLambdaFilter j√° existe no arquivo
    if (destContent.contains("type: AWSLambdaFilter")) {
        println "üîÑ Filtro AWSLambdaFilter j√° existe. Atualizando se√ß√£o..."
        
        // Estrat√©gia: preservar outros filtros e apenas atualizar AWSLambdaFilter
        def lines = destContent.split('\n')
        def newLines = []
        def skipSection = false
        def inInternationalizationFilter = false
        def foundAWSLambdaFilter = false
        def outputNewContent = false
        
        for (int i = 0; i < lines.length; i++) {
            def line = lines[i]
            def trimmedLine = line.trim()
            
            // Detectar in√≠cio de InternationalizationFilter
            if (trimmedLine == "type: InternationalizationFilter") {
                inInternationalizationFilter = true
                skipSection = false
                newLines.add(line)
                continue
            }
            
            // Se estamos dentro de InternationalizationFilter, verificar se cont√©m AWSLambdaFilter
            if (inInternationalizationFilter && trimmedLine == "type: AWSLambdaFilter") {
                if (foundAWSLambdaFilter) {
                    // J√° encontramos uma se√ß√£o AWSLambdaFilter, pular esta
                    skipSection = true
                    continue
                } else {
                    // Primeira ocorr√™ncia, pular e substituir com novo conte√∫do
                    foundAWSLambdaFilter = true
                    skipSection = true
                    outputNewContent = true
                    continue
                }
            }
            
            // Detectar fim da se√ß√£o InternationalizationFilter
            if (inInternationalizationFilter && trimmedLine.startsWith("-") && trimmedLine != "type: InternationalizationFilter") {
                inInternationalizationFilter = false
                skipSection = false
                // Adicionar novo conte√∫do antes da pr√≥xima se√ß√£o
                if (outputNewContent) {
                    newLines.add("")
                    newLines.addAll(sourceContent.split('\n'))
                    outputNewContent = false
                }
                newLines.add(line)
                continue
            }
            
            // Se estamos pulando a se√ß√£o, continuar at√© o fim
            if (skipSection) {
                continue
            }
            
            newLines.add(line)
        }
        
        // Se ainda n√£o adicionamos o novo conte√∫do, adicionar no final
        if (outputNewContent) {
            newLines.add("")
            newLines.addAll(sourceContent.split('\n'))
        }
        
        destFile.text = newLines.join('\n')
        
        println "‚úÖ Se√ß√£o AWSLambdaFilter atualizada: ${destFile.name}"
        return true
    } else {
        // Adicionar ao final se n√£o existir
        if (destContent.endsWith('\n')) {
            destFile.text = destContent + sourceContent
        } else {
            destFile.text = destContent + '\n' + sourceContent
        }
        println "‚úÖ Conte√∫do adicionado ao final: ${destFile.name}"
        return true
    }
}

// Fun√ß√£o auxiliar para instalar arquivos YAML no Windows
def installYamlFiles(def projectPath, def taskName) {
    println "üöÄ Instalando arquivos YAML do filtro AWS Lambda no Windows..."
    println "üìã Task: ${taskName}"
    println "üìÅ Projeto: ${projectPath}"
    println ""
    
    // Validar se o caminho existe
    def projectDir = new File(projectPath)
    if (!projectDir.exists()) {
        println "‚ö†Ô∏è  Aviso: O diret√≥rio n√£o existe. Criando..."
        projectDir.mkdirs()
    }
    
    // Criar estrutura de diret√≥rios
    def (metaInfDir, systemDir) = createProjectStructure(projectPath)
    
    // Copiar arquivos YAML
    def sourceYamlDir = new File("src/main/resources/yaml")
    
    // Copiar arquivos YAML
    copyYamlFiles(sourceYamlDir, metaInfDir, systemDir)
    
    println ""
    println "üéâ Instala√ß√£o dos arquivos YAML conclu√≠da!"
    println "üìÅ Projeto Policy Studio: ${projectPath}"
    println ""
    showNextSteps()
}

// Fun√ß√£o auxiliar para mostrar pr√≥ximos passos
def showNextSteps() {
    println "üìã Pr√≥ximos passos:"
    println "1. Copie o JAR buildado no Linux para o Windows"
    println "2. Abra o Policy Studio"
    println "3. V√° em Window > Preferences > Runtime Dependencies"
    println "4. Adicione o JAR: aws-lambda-apim-sdk-1.0.1.jar"
    println "5. Reinicie o Policy Studio com -clean"
    println "6. Procure por 'AWS Lambda Filter' na paleta"
}

// Fun√ß√£o auxiliar para criar estrutura de diret√≥rios do projeto
def createProjectStructure(def projectPath) {
    def metaInfDir = new File(projectPath, "META-INF/types/Entity/Filter/AWSFilter")
    def systemDir = new File(projectPath, "System")
    
    metaInfDir.mkdirs()
    systemDir.mkdirs()
    
    return [metaInfDir, systemDir]
}

// Fun√ß√£o auxiliar para copiar arquivos YAML
def copyYamlFiles(def sourceYamlDir, def metaInfDir, def systemDir) {
    // Copiar AWSLambdaFilter.yaml
    def sourceFilterYaml = new File(sourceYamlDir, "META-INF/types/Entity/Filter/AWSFilter/AWSLambdaFilter.yaml")
    def destFilterYaml = new File(metaInfDir, "AWSLambdaFilter.yaml")
    
    if (sourceFilterYaml.exists()) {
        destFilterYaml.text = sourceFilterYaml.text
        println "‚úÖ Copiado: AWSLambdaFilter.yaml"
    } else {
        println "‚ùå Arquivo n√£o encontrado: ${sourceFilterYaml.absolutePath}"
    }
    
    // Processar arquivo de internacionaliza√ß√£o
    def sourceIntlYaml = new File(sourceYamlDir, "System/Internationalization Default.yaml")
    def destIntlYaml = new File(systemDir, "Internationalization Default.yaml")
    
    processInternationalizationFile(sourceIntlYaml, destIntlYaml)
}

// Task para instala√ß√£o Windows com caminho espec√≠fico
task installWindowsToProject {
    group = 'Installation'
    description = 'Instala YAML em projeto Policy Studio espec√≠fico'
    
    doFirst {
        // Obter caminho do projeto via propriedade do sistema
        def projectPath = System.getProperty('project.path')
        
        if (!projectPath) {
            // Se n√£o foi especificado, solicitar interativamente
            projectPath = System.console()?.readLine("üìÇ Digite o caminho do projeto Policy Studio (ex: C:\\Users\\jbarros\\apiprojects\\DIGIO-POC-AKS): ")
            
            if (!projectPath) {
                throw new GradleException("‚ùå Caminho do projeto n√£o informado! Use: -Dproject.path=C:\\caminho\\do\\projeto")
            }
        }
        
        println "üìÅ Projeto: ${projectPath}"
        
        // Usar fun√ß√£o auxiliar para instalar arquivos YAML
        installYamlFiles(projectPath, "installWindowsToProject")
    }
}

// Task para build do JAR (apenas Linux)
task buildJarLinux {
    group = 'Build'
    description = 'Build do JAR no Linux (n√£o funciona no Windows)'
    
    dependsOn build
    
    doFirst {
        println "üî® Build do JAR AWS Lambda Filter..."
        println "üìÅ JAR: build/libs/aws-lambda-apim-sdk-1.0.1.jar"
        println "‚ö†Ô∏è  Nota: Esta task deve ser executada apenas no Linux"
    }
    
    doLast {
        def jarFile = new File("build/libs/aws-lambda-apim-sdk-1.0.1.jar")
        if (jarFile.exists()) {
            println "‚úÖ JAR criado com sucesso: ${jarFile.absolutePath}"
            println "üìã Para Windows: Copie este JAR para o ambiente Windows"
        } else {
            println "‚ùå Erro: JAR n√£o foi criado"
        }
    }
}

// Task para mostrar informa√ß√µes de download dos JARs AWS
task showAwsJars {
    group = 'Installation'
    description = 'Mostra links para download dos JARs AWS SDK'
    
    doLast {
        println "üì¶ JARs AWS SDK necess√°rios para Windows:"
        println ""
        println "üîó aws-java-sdk-lambda-1.12.314.jar:"
        println "   https://repo1.maven.org/maven2/com/amazonaws/aws-java-sdk-lambda/1.12.314/aws-java-sdk-lambda-1.12.314.jar"
        println ""
        println "üîó aws-java-sdk-core-1.12.314.jar:"
        println "   https://repo1.maven.org/maven2/com/amazonaws/aws-java-sdk-core/1.12.314/aws-java-sdk-core-1.12.314.jar"
        println ""
        println "üìã Ap√≥s download:"
        println "1. Adicione os JARs ao classpath do Policy Studio"
        println "2. Reinicie o Policy Studio com -clean"
    }
}

// Task para configurar caminho do Axway
task setAxwayPath {
    group = 'Configuration'
    description = 'Configura o caminho do Axway API Gateway'
    
    doLast {
        println "üîß Configura√ß√£o do Axway API Gateway"
        println ""
        println "üìÅ Caminho atual: ${axway_base}"
        println "üìÅ APIM: ${apim_folder}"
        println "üìÅ Policy Studio: ${ps_folder}"
        println ""
        println "üí° Para alterar o caminho, use:"
        println "   ./gradlew -Daxway.base=/caminho/para/axway build"
        println "   ./gradlew -Daxway.base=/opt/axway/Axway-7.7.0.20240830 installLinux"
        println ""
        println "üìã Exemplos:"
        println "   ./gradlew -Daxway.base=/opt/axway/Axway-7.7.0.20210830 build"
        println "   ./gradlew -Daxway.base=/home/user/axway/Axway-7.7.0.20240830 installLinux"
    }
}

// Task para mostrar informa√ß√µes do projeto
task showProjectInfo {
    group = 'Help'
    description = 'Mostra informa√ß√µes detalhadas do projeto'
    
    doLast {
        println "üìã Informa√ß√µes do Projeto AWS Lambda APIM SDK"
        println "=============================================="
        println ""
        println "üè∑Ô∏è  Vers√£o atual: ${version}"
        println "üì¶ Grupo: ${group}"
        println "üîß Java: ${sourceCompatibility}"
        println ""
        println "üìÅ Estrutura do Projeto:"
        println "  - src/main/java/     # C√≥digo fonte Java"
        println "  - src/main/resources/ # Recursos (YAML, etc.)"
        println "  - scripts/           # Scripts de instala√ß√£o"
        println "  - docs/              # Documenta√ß√£o"
        println ""
        println "üîó Depend√™ncias Principais:"
        println "  - AWS SDK Lambda: 1.12.314"
        println "  - AWS SDK Core: 1.12.314"
        println "  - Axway API Gateway: 7.7.0.20240830"
        println ""
        println "üöÄ Funcionalidades:"
        println "  - Filtro AWS Lambda para Axway API Gateway"
        println "  - Suporte a m√∫ltiplas vers√µes do Axway"
        println "  - Instala√ß√£o automatizada (Linux/Windows)"
        println "  - Versionamento sem√¢ntico autom√°tico"
        println "  - Sistema de release autom√°tico"
    }
}

// Task para mostrar todas as tasks dispon√≠veis
task showTasks {
    group = 'Help'
    description = 'Mostra todas as tasks dispon√≠veis'
    
    doLast {
        println "üöÄ Tasks dispon√≠veis:"
        println ""
        println "üì¶ Build:"
        println "  ./gradlew build                    # Build do projeto (Linux)"
        println "  ./gradlew buildJarLinux           # Build do JAR (apenas Linux)"
        println "  ./gradlew clean build             # Clean + Build"
        println ""
        println "üîß Configura√ß√£o:"
        println "  ./gradlew setAxwayPath            # Mostra configura√ß√£o do Axway"
        println "  ./gradlew showProjectInfo         # Mostra informa√ß√µes do projeto"
        println ""
        println "üîß Instala√ß√£o Linux:"
        println "  ./gradlew installLinux            # Instala no Linux (JAR + YAML)"
        println "  ./gradlew -Daxway.base=/path installLinux  # Com caminho customizado"
        println ""
        println "üîß Instala√ß√£o Windows:"
        println "  ./gradlew installWindows          # Instala YAML no Windows (interativo)"
        println "  ./gradlew -Dproject.path=/path installWindowsToProject  # Instala YAML em projeto espec√≠fico"
        println "  ./gradlew showAwsJars             # Mostra links dos JARs AWS"
        println ""
        println "‚ùì Ajuda:"
        println "  ./gradlew showTasks               # Mostra esta lista"
        println "  ./gradlew tasks                   # Lista todas as tasks"
    }
}

