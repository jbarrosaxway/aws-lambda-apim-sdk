name: Build Multi-Version JARs

on:
  push:
    branches: [ master, main, develop ]
    paths:
      - 'src/**'
      - 'build.gradle'
      - 'gradle/**'
      - 'axway-versions.json'
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Axway version to build'
        required: false
        default: '7.7.0.20240830'
        type: string

jobs:
  build-multi-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Parse versions
      id: versions
      run: |
        if [ "${{ github.event.inputs.version }}" != "" ]; then
          # Build espec√≠fico
          echo "versions=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          # Build todas as vers√µes
          versions=$(jq -r '.versions | keys[]' axway-versions.json | tr '\n' ',' | sed 's/,$//')
          echo "versions=$versions" >> $GITHUB_OUTPUT
        fi
        
        echo "üìã Vers√µes para build: ${{ steps.versions.outputs.versions }}"
        
    - name: Build for each version
      run: |
        # Determinar nova vers√£o baseada no tipo de commit
        CURRENT_VERSION=$(grep -o 'version = "[^"]*"' build.gradle | cut -d'"' -f2)
        echo "üìã Vers√£o atual: $CURRENT_VERSION"
        
        # Incrementar vers√£o baseada no tipo de commit
        if [[ "${{ github.event.head_commit.message }}" == *"BREAKING CHANGE"* ]] || [[ "${{ github.event.head_commit.message }}" == *"!:"* ]]; then
          # MAJOR version
          NEW_VERSION=$(echo "$CURRENT_VERSION" | awk -F. '{print $1+1 ".0.0"}')
          echo "üö® Incrementando MAJOR version: $CURRENT_VERSION -> $NEW_VERSION"
        elif [[ "${{ github.event.head_commit.message }}" == *"feat:"* ]]; then
          # MINOR version
          NEW_VERSION=$(echo "$CURRENT_VERSION" | awk -F. '{print $1 "." $2+1 ".0"}')
          echo "‚ú® Incrementando MINOR version: $CURRENT_VERSION -> $NEW_VERSION"
        else
          # PATCH version
          NEW_VERSION=$(echo "$CURRENT_VERSION" | awk -F. '{print $1 "." $2 "." $3+1}')
          echo "üîß Incrementando PATCH version: $CURRENT_VERSION -> $NEW_VERSION"
        fi
        
        # Atualizar build.gradle com nova vers√£o
        sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" build.gradle
        echo "‚úÖ Vers√£o atualizada no build.gradle: $NEW_VERSION"
        
        VERSIONS="${{ steps.versions.outputs.versions }}"
        
        for VERSION in ${VERSIONS//,/ }; do
          echo "üîß Build para vers√£o: $VERSION"
          
          # Extrair informa√ß√µes da vers√£o
          VERSION_INFO=$(jq -r ".versions[\"$VERSION\"]" axway-versions.json)
          DOCKER_IMAGE=$(echo "$VERSION_INFO" | jq -r '.docker_image')
          BASE_PATH=$(echo "$VERSION_INFO" | jq -r '.base_path')
          
          echo "üê≥ Docker image: $DOCKER_IMAGE"
          echo "üìÅ Base path: $BASE_PATH"
          
          # Pull da imagem Docker (se existir)
          if docker pull "$DOCKER_IMAGE" 2>/dev/null; then
            echo "‚úÖ Imagem encontrada: $DOCKER_IMAGE"
          else
            echo "‚ö†Ô∏è  Imagem n√£o encontrada: $DOCKER_IMAGE"
            echo "üìã Build da imagem ser√° necess√°rio"
          fi
          
          # Build com Docker
          docker run --rm \
            -v "$(pwd):/workspace" \
            -w /workspace \
            "$DOCKER_IMAGE" \
            gradle -Daxway.base="$BASE_PATH" clean build
          
                  # Verificar resultado
        JAR_FILE=$(find build/libs -name "aws-lambda-apim-sdk-*.jar" | head -1)
        if [ -n "$JAR_FILE" ]; then
          echo "‚úÖ JAR criado para $VERSION: $JAR_FILE"
          ls -la "$JAR_FILE"
          
          # Copiar JAR para workspace do host com nome da vers√£o
          cp "$JAR_FILE" "/workspace/aws-lambda-apim-sdk-$VERSION.jar"
          echo "‚úÖ JAR copiado para workspace: aws-lambda-apim-sdk-$VERSION.jar"
        else
          echo "‚ùå JAR n√£o encontrado para $VERSION"
          echo "üìÅ Conte√∫do de build/libs:"
          ls -la build/libs/ || echo "Diret√≥rio build/libs n√£o existe"
          exit 1
        fi
        done
        
    - name: Upload JARs as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: aws-lambda-apim-sdk-jars
        path: build/libs/aws-lambda-apim-sdk-*.jar
        retention-days: 30
        
    - name: Create Release for each version
      if: github.event_name != 'pull_request' && contains(github.ref, 'master')
      run: |
        VERSIONS="${{ steps.versions.outputs.versions }}"
        
        for VERSION in ${VERSIONS//,/ }; do
          echo "üöÄ Criando release para vers√£o: $VERSION"
          
          # Configurar git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          
          # Gerar tag com vers√£o do Axway
          TAG_NAME="v$VERSION-$(date +%Y%m%d)"
          echo "üìã Criando tag: $TAG_NAME"
          
          # Verificar se tag j√° existe
          if git tag -l "$TAG_NAME" | grep -q "$TAG_NAME"; then
            echo "‚ö†Ô∏è  Tag $TAG_NAME j√° existe. Pulando cria√ß√£o."
          else
            git tag "$TAG_NAME"
            git push origin "$TAG_NAME"
            echo "‚úÖ Tag $TAG_NAME criada e enviada!"
          fi
          
          # Criar release
          gh release create "$TAG_NAME" \
            --title "Release for Axway $VERSION" \
            --notes "Build para Axway API Gateway $VERSION" \
            --repo "${{ github.repository }}" \
            "aws-lambda-apim-sdk-$VERSION.jar"
        done 