name: Build Multi-Version JARs

on:
  push:
    branches: [ master, main, develop ]
    paths:
      - 'src/**'
      - 'build.gradle'
      - 'gradle/**'
      - 'axway-versions.json'
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Axway version to build'
        required: false
        default: '7.7.0.20240830'
        type: string

jobs:
  build-multi-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Parse versions
      id: versions
      run: |
        if [ "${{ github.event.inputs.version }}" != "" ]; then
          # Build específico
          echo "versions=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          # Build todas as versões
          versions=$(jq -r '.versions | keys[]' axway-versions.json | tr '\n' ',' | sed 's/,$//')
          echo "versions=$versions" >> $GITHUB_OUTPUT
        fi
        
        echo "📋 Versões para build: ${{ steps.versions.outputs.versions }}"
        
    - name: Build for each version
      id: build
      run: |
        # Usar script de versionamento semântico
        echo "🔍 Executando versionamento semântico..."
        chmod +x scripts/version-bump.sh
        ./scripts/version-bump.sh
        
        # Ler versão atualizada do arquivo .version_info
        if [ -f ".version_info" ]; then
          source .version_info
          echo "📋 Versão calculada: $NEW_VERSION ($VERSION_TYPE)"
          RELEASE_VERSION="$NEW_VERSION"
        else
          echo "⚠️  Arquivo .version_info não encontrado, usando versão atual"
          RELEASE_VERSION=$(grep -o 'version = "[^"]*"' build.gradle | cut -d'"' -f2)
        fi
        
        # Verificar se versão foi detectada corretamente
        echo "📋 Versão lida do build.gradle: '$RELEASE_VERSION'"
        if [ -z "$RELEASE_VERSION" ] || [ "$RELEASE_VERSION" = "" ]; then
          echo "⚠️  Versão vazia detectada, tentando ler novamente..."
          # Tentar ler novamente após um pequeno delay
          sleep 2
          RELEASE_VERSION=$(grep -o 'version = "[^"]*"' build.gradle | cut -d'"' -f2)
          echo "📋 Versão após retry: '$RELEASE_VERSION'"
        fi
        
        # Salvar versão como output para outros jobs
        echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
        echo "📋 Versão salva como output: $RELEASE_VERSION"
        
        VERSIONS="${{ steps.versions.outputs.versions }}"
        
        for VERSION in ${VERSIONS//,/ }; do
          echo "🔧 Build para versão: $VERSION"
          
          # Extrair informações da versão
          VERSION_INFO=$(jq -r ".versions[\"$VERSION\"]" axway-versions.json)
          DOCKER_IMAGE=$(echo "$VERSION_INFO" | jq -r '.docker_image')
          BASE_PATH=$(echo "$VERSION_INFO" | jq -r '.base_path')
          
          echo "🐳 Docker image: $DOCKER_IMAGE"
          echo "📁 Base path: $BASE_PATH"
          
          # Pull da imagem Docker (se existir)
          if docker pull "$DOCKER_IMAGE" 2>/dev/null; then
            echo "✅ Imagem encontrada: $DOCKER_IMAGE"
          else
            echo "⚠️  Imagem não encontrada: $DOCKER_IMAGE"
            echo "📋 Build da imagem será necessário"
          fi
          
          # Build com Docker
          docker run --rm \
            -v "$(pwd):/workspace" \
            -w /workspace \
            "$DOCKER_IMAGE" \
            gradle -Daxway.base="$BASE_PATH" clean build
          
                  # Verificar resultado
        JAR_FILE=$(find build/libs -name "aws-lambda-apim-sdk-*.jar" | head -1)
        if [ -n "$JAR_FILE" ]; then
          echo "✅ JAR criado para $VERSION: $JAR_FILE"
          ls -la "$JAR_FILE"
          
          # Copiar JAR para diretório atual com nome da versão
          cp "$JAR_FILE" "./aws-lambda-apim-sdk-$VERSION.jar"
          echo "✅ JAR copiado: aws-lambda-apim-sdk-$VERSION.jar"
          
          # Verificar se há JARs externos (dependências que não estão no Gateway)
          echo "🔍 Verificando dependências externas..."
          if [ -d "${BASE_PATH}/apigateway/system/lib" ]; then
            # Listar JARs externos que podem ser necessários
            echo "📋 JARs disponíveis no Axway:"
            ls -la "${BASE_PATH}/apigateway/system/lib"/*.jar 2>/dev/null || echo "Nenhum JAR encontrado"
          fi
        else
          echo "❌ JAR não encontrado para $VERSION"
          echo "📁 Conteúdo de build/libs:"
          ls -la build/libs/ || echo "Diretório build/libs não existe"
          exit 1
        fi
        done
        
    - name: Upload JARs as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: aws-lambda-apim-sdk-jars
        path: build/libs/aws-lambda-apim-sdk-*.jar
        retention-days: 30
        
    - name: Create Single Release with all JARs
      if: github.event_name != 'pull_request' && contains(github.ref, 'master')
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Configurar git
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        
        # Obter versão do job de build
        RELEASE_VERSION="${{ steps.build.outputs.release_version }}"
        echo "📋 Versão obtida do job de build: '$RELEASE_VERSION'"
        
        # Verificar se versão foi obtida
        if [ -z "$RELEASE_VERSION" ] || [ "$RELEASE_VERSION" = "" ]; then
          echo "⚠️  Versão não obtida do job de build, tentando ler do build.gradle..."
          RELEASE_VERSION=$(grep -o 'version = "[^"]*"' build.gradle | cut -d'"' -f2)
          echo "📋 Versão lida do build.gradle: '$RELEASE_VERSION'"
        fi
        
        if [ -z "$RELEASE_VERSION" ]; then
          echo "⚠️  Versão ainda não detectada, usando fallback"
          RELEASE_VERSION="1.0.0"
        fi
        
        echo "📋 Versão final da release: $RELEASE_VERSION"
        
        # Verificar se tag já existe
        if git tag -l "v$RELEASE_VERSION" | grep -q "v$RELEASE_VERSION"; then
          echo "⚠️  Tag v$RELEASE_VERSION já existe. Incrementando versão..."
          # Incrementar PATCH version
          NEW_PATCH=$(echo "$RELEASE_VERSION" | awk -F. '{print $3+1}')
          RELEASE_VERSION=$(echo "$RELEASE_VERSION" | awk -F. '{print $1 "." $2 "." '$NEW_PATCH'}')
          echo "📋 Nova versão: $RELEASE_VERSION"
          
          # Atualizar build.gradle com a nova versão
          sed -i "s/version = \"[^\"]*\"/version = \"$RELEASE_VERSION\"/" build.gradle
          echo "✅ build.gradle atualizado com versão: $RELEASE_VERSION"
        fi
        
        # Gerar tag com semantic version
        TAG_NAME="v${RELEASE_VERSION}"
        echo "📋 Criando tag: $TAG_NAME"
        
        # Verificar se tag já existe
        if git tag -l "$TAG_NAME" | grep -q "$TAG_NAME"; then
          echo "⚠️  Tag $TAG_NAME já existe. Pulando criação."
        else
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"
          echo "✅ Tag $TAG_NAME criada e enviada!"
        fi
        
        # Preparar lista de JARs para upload
        JAR_FILES=""
        VERSIONS="${{ steps.versions.outputs.versions }}"
        
        for VERSION in ${VERSIONS//,/ }; do
          JAR_FILE="aws-lambda-apim-sdk-$VERSION.jar"
          if [ -f "$JAR_FILE" ]; then
            JAR_FILES="$JAR_FILES $JAR_FILE"
            echo "✅ JAR encontrado: $JAR_FILE"
          else
            echo "❌ JAR não encontrado: $JAR_FILE"
          fi
        done
        
        # Criar ZIPs para cada versão com estrutura organizada
        VERSIONS="${{ steps.versions.outputs.versions }}"
        RELEASE_DATE=$(date +%Y%m%d-%H%M%S)
        
        for VERSION in ${VERSIONS//,/ }; do
          echo "📦 Criando ZIP para versão: $VERSION"
          
          # Criar diretório temporário para o ZIP
          ZIP_DIR="aws-lambda-apim-sdk-${RELEASE_VERSION}-${VERSION}-${RELEASE_DATE}"
          mkdir -p "$ZIP_DIR"
          
          # Copiar JAR principal (versão compilada do build/libs)
          BUILD_JAR=$(find build/libs -name "aws-lambda-apim-sdk-*.jar" | head -1)
          if [ -n "$BUILD_JAR" ]; then
            cp "$BUILD_JAR" "$ZIP_DIR/"
            echo "✅ JAR do build copiado: $(basename "$BUILD_JAR")"
          fi
          
          # Copiar dependências externas (JARs que o Gradle baixou)
          echo "📋 Copiando dependências externas do Gradle..."
          mkdir -p "$ZIP_DIR/dependencies"
          
          # Capturar JARs que o Gradle baixou durante o build
          echo "🔍 Capturando JARs baixados pelo Gradle..."
          
          # Procurar JARs AWS no diretório de build do Gradle
          GRADLE_BUILD_DIR="build"
          if [ -d "$GRADLE_BUILD_DIR" ]; then
            echo "📁 Procurando JARs em: $GRADLE_BUILD_DIR"
            
            # Procurar JARs AWS em todo o diretório de build
            AWS_JARS=$(find "$GRADLE_BUILD_DIR" -name "*aws-java-sdk-*" -type f 2>/dev/null)
            if [ -n "$AWS_JARS" ]; then
              for JAR in $AWS_JARS; do
                cp "$JAR" "$ZIP_DIR/dependencies/"
                echo "✅ Copiado JAR do build: $(basename "$JAR")"
              done
            fi
          fi
          
          # Procurar JARs AWS no cache do Gradle (backup)
          GRADLE_CACHE_DIR="$HOME/.gradle/caches/modules-2/files-2.1"
          if [ ! -d "$GRADLE_CACHE_DIR" ]; then
            GRADLE_CACHE_DIR="/root/.gradle/caches/modules-2/files-2.1"
          fi
          if [ ! -d "$GRADLE_CACHE_DIR" ]; then
            GRADLE_CACHE_DIR="/workspace/.gradle/caches/modules-2/files-2.1"
          fi
          if [ ! -d "$GRADLE_CACHE_DIR" ]; then
            GRADLE_CACHE_DIR=".gradle/caches/modules-2/files-2.1"
          fi
          
          if [ -d "$GRADLE_CACHE_DIR" ]; then
            echo "🔍 Procurando AWS SDK Lambda no cache do Gradle..."
            
            # Procurar especificamente por aws-java-sdk-lambda
            LAMBDA_JARS=$(find "$GRADLE_CACHE_DIR" -name "*aws-java-sdk-lambda*" -type f 2>/dev/null)
            if [ -n "$LAMBDA_JARS" ]; then
              for JAR in $LAMBDA_JARS; do
                cp "$JAR" "$ZIP_DIR/dependencies/"
                echo "✅ Copiado AWS SDK Lambda: $(basename "$JAR")"
              done
            else
              echo "⚠️  AWS SDK Lambda não encontrado no cache do Gradle"
            fi
            
            # Procurar por aws-java-sdk-core (dependência do Lambda)
            CORE_JARS=$(find "$GRADLE_CACHE_DIR" -name "*aws-java-sdk-core*" -type f 2>/dev/null)
            if [ -n "$CORE_JARS" ]; then
              for JAR in $CORE_JARS; do
                cp "$JAR" "$ZIP_DIR/dependencies/"
                echo "✅ Copiado AWS SDK Core: $(basename "$JAR")"
              done
            else
              echo "⚠️  AWS SDK Core não encontrado no cache do Gradle"
            fi
          else
            echo "⚠️  Cache do Gradle não encontrado"
          fi
          
          # Verificar se há JARs na pasta dependencies
          if [ -d "$ZIP_DIR/dependencies" ] && [ "$(ls -A "$ZIP_DIR/dependencies" 2>/dev/null)" ]; then
            echo "✅ Dependências externas copiadas para $ZIP_DIR/dependencies/"
            ls -la "$ZIP_DIR/dependencies/"
          else
            echo "⚠️  Nenhuma dependência externa encontrada"
          fi
          
          # Copiar dependências para workspace também (para debug)
          mkdir -p "./dependencies"
          if [ -d "$ZIP_DIR/dependencies" ] && [ "$(ls -A "$ZIP_DIR/dependencies" 2>/dev/null)" ]; then
            cp "$ZIP_DIR/dependencies"/* "./dependencies/" 2>/dev/null || echo "⚠️  Erro ao copiar para workspace"
            echo "✅ Dependências copiadas para workspace: ./dependencies/"
            ls -la "./dependencies/" 2>/dev/null || echo "⚠️  Pasta dependencies não encontrada no workspace"
          fi
          
          # Verificar se há JARs na pasta dependencies
          if [ -d "$ZIP_DIR/dependencies" ] && [ "$(ls -A "$ZIP_DIR/dependencies" 2>/dev/null)" ]; then
            echo "✅ Dependências externas copiadas para $ZIP_DIR/dependencies/"
            ls -la "$ZIP_DIR/dependencies/"
          else
            echo "⚠️  Nenhuma dependência externa encontrada"
          fi
          
          # Criar README com informações
          echo "# AWS Lambda APIM SDK" > "$ZIP_DIR/README.md"
          echo "" >> "$ZIP_DIR/README.md"
          echo "Versão da Release: $RELEASE_VERSION" >> "$ZIP_DIR/README.md"
          echo "Versão do Axway: $VERSION" >> "$ZIP_DIR/README.md"
          echo "Data da Release: $RELEASE_DATE" >> "$ZIP_DIR/README.md"
          echo "" >> "$ZIP_DIR/README.md"
          echo "## Instalação" >> "$ZIP_DIR/README.md"
          echo "" >> "$ZIP_DIR/README.md"
          echo "1. Copie o JAR principal para sua instalação do Axway" >> "$ZIP_DIR/README.md"
          echo "2. Copie as dependências (pasta dependencies/) se necessário" >> "$ZIP_DIR/README.md"
          echo "3. Reinicie o serviço do Axway" >> "$ZIP_DIR/README.md"
          echo "" >> "$ZIP_DIR/README.md"
          echo "## Arquivos incluídos" >> "$ZIP_DIR/README.md"
          echo "" >> "$ZIP_DIR/README.md"
          echo "- aws-lambda-apim-sdk-$VERSION.jar - SDK principal (renomeado)" >> "$ZIP_DIR/README.md"
          echo "- aws-lambda-apim-sdk-*.jar - SDK principal (versão original do build)" >> "$ZIP_DIR/README.md"
          echo "- dependencies/ - Dependências externas do Gradle" >> "$ZIP_DIR/README.md"
          echo "" >> "$ZIP_DIR/README.md"
          echo "## Compatibilidade" >> "$ZIP_DIR/README.md"
          echo "" >> "$ZIP_DIR/README.md"
          echo "Este SDK foi testado com Axway API Gateway $VERSION" >> "$ZIP_DIR/README.md"
          
          # Criar ZIP
          ZIP_NAME="aws-lambda-apim-sdk-${RELEASE_VERSION}-${VERSION}-${RELEASE_DATE}.zip"
          zip -r "$ZIP_NAME" "$ZIP_DIR/"
          echo "✅ ZIP criado: $ZIP_NAME"
          
          # Limpar diretório temporário
          rm -rf "$ZIP_DIR"
        done
        
        # Criar release com ZIPs
        ZIP_FILES=$(ls aws-lambda-apim-sdk-*.zip 2>/dev/null)
        if [ -n "$ZIP_FILES" ]; then
          echo "🚀 Criando release com ZIPs: $ZIP_FILES"
          gh release create "$TAG_NAME" \
            --title "Release v${RELEASE_VERSION} - Multi-Version" \
            --notes "Build para múltiplas versões do Axway API Gateway - Versão: $RELEASE_VERSION - Data: $RELEASE_DATE - ZIPs: $ZIP_FILES - Versões: $VERSIONS" \
            --repo "${{ github.repository }}" \
            $ZIP_FILES
          echo "✅ Release criada com sucesso!"
        else
          echo "❌ Nenhum ZIP encontrado para upload"
          exit 1
        fi 