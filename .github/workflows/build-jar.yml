name: Build JAR

on:
  push:
    branches: [ master, main, develop ]
    paths:
      - 'src/**'
      - 'build.gradle'
      - 'gradle/**'
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:  # Execução manual

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Necessário para análise de mudanças
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Pull published Docker image
      run: |
        # Pull da imagem publicada
        docker pull axwayjbarros/aws-lambda-apim-sdk:1.0.0
        
    - name: Check if Release is Needed
      id: release_check
      run: |
        echo "🔍 Verificando se release é necessário..."
        ./scripts/check-release-needed.sh
        
        if [ -f .release_check ]; then
          source .release_check
          echo "📋 Resultado da análise:"
          echo "   Release necessário: $RELEASE_NEEDED"
          echo "   Arquivos relevantes: $RELEVANT_FILES"
          
          if [ "$RELEASE_NEEDED" = "true" ]; then
            echo "🔴 Release será criado!"
            echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
            echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "release_needed=true" >> $GITHUB_OUTPUT
          else
            echo "🟢 Nenhum release necessário"
            echo "release_needed=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "⚠️  Arquivo .release_check não encontrado"
          echo "release_needed=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Build JAR with Docker
      run: |
        echo '🐳 Executando build com Docker...'
        echo '📦 Imagem: axwayjbarros/aws-lambda-apim-sdk:1.0.0'
        echo '🔧 Parâmetro axway.base: /opt/Axway'
        
        # Executar build dentro do container Docker
        docker run --rm \
          -v "$(pwd):/workspace" \
          -w /workspace \
          axwayjbarros/aws-lambda-apim-sdk:1.0.0 \
          gradle -Daxway.base=/opt/Axway clean build
        
        echo '📋 Verificando resultado...'
        ls -la build/libs/ || echo 'Diretório build/libs não encontrado'
        
    - name: Test JAR
      run: |
        # Verificar se o JAR foi criado
        echo "🔍 Verificando JAR criado..."
        ls -la build/libs/aws-lambda-apim-sdk-*.jar || echo "❌ JAR não encontrado"
        
        # Verificar conteúdo do JAR
        echo "📋 Conteúdo do JAR:"
        jar -tf build/libs/aws-lambda-apim-sdk-*.jar | head -10 || echo "❌ Não foi possível verificar conteúdo"
        
        # Verificar tamanho do JAR
        echo "📏 Tamanho do JAR:"
        du -h build/libs/aws-lambda-apim-sdk-*.jar || echo "❌ Não foi possível verificar tamanho"
        
        # Verificar se o JAR contém as classes principais
        echo "🔍 Verificando classes principais..."
        jar -tf build/libs/aws-lambda-apim-sdk-*.jar | grep -E "(AWSLambdaFilter|AWSLambdaProcessor)" || echo "❌ Classes principais não encontradas"
        
    - name: Upload JAR as artifact
      uses: actions/upload-artifact@v4
      with:
        name: aws-lambda-apim-sdk-jar
        path: build/libs/aws-lambda-apim-sdk-*.jar
        retention-days: 30
        
    - name: Create Release
      if: steps.release_check.outputs.release_needed == 'true' && github.event_name != 'pull_request' && contains(github.ref, 'master')
      run: |
        echo "🚀 Criando release automaticamente..."
        
        # Configurar git com token
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Configurar remote com token
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        
        # Obter informações da versão
        source .release_check
        NEW_VERSION="$NEW_VERSION"
        
        echo "📋 Verificando tag: v$NEW_VERSION"
        
        # Verificar se a tag já existe
        if git tag -l "v$NEW_VERSION" | grep -q "v$NEW_VERSION"; then
          echo "⚠️  Tag v$NEW_VERSION já existe. Pulando criação da tag."
        else
          echo "📋 Criando tag: v$NEW_VERSION"
          # Criar tag
          git tag "v$NEW_VERSION"
          # Push da tag
          git push origin "v$NEW_VERSION"
          echo "✅ Tag v$NEW_VERSION criada e enviada!"
        fi
        
        echo "🔄 Continuando com criação do release..."
        
    - name: Generate changelog
      if: steps.release_check.outputs.release_needed == 'true' && github.event_name != 'pull_request' && contains(github.ref, 'master')
      id: changelog
      run: |
        source .release_check
        NEW_VERSION="$NEW_VERSION"
        
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        git log --oneline $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create GitHub Release
      if: steps.release_check.outputs.release_needed == 'true' && github.event_name != 'pull_request' && contains(github.ref, 'master')
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.release_check.outputs.new_version }}
        release_name: Release v${{ steps.release_check.outputs.new_version }}
        body: |
          ## Changes in this Release
          
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Build Information
          
          This release was built using the Docker image `axwayjbarros/aws-lambda-apim-sdk:1.0.0` which contains:
          - Axway API Gateway 7.7.0.20240830
          - Java 11 OpenJDK
          - AWS SDK for Java 1.12.314
          - All necessary dependencies for building the filter
          
          ## Installation
          
          Download the JAR file from the assets below and follow the installation guide in the README.
          
          ## Usage
          
          This JAR contains the AWS Lambda integration for Axway API Gateway. 
          Follow the installation guide in the README for setup instructions.
        draft: false
        prerelease: false
        
    - name: Upload JAR to Release
      if: steps.release_check.outputs.release_needed == 'true' && github.event_name != 'pull_request' && contains(github.ref, 'master')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/libs/aws-lambda-apim-sdk-*.jar
        asset_name: aws-lambda-apim-sdk-v${{ steps.release_check.outputs.new_version }}.jar
        asset_content_type: application/java-archive
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const jarFiles = fs.readdirSync('build/libs').filter(file => file.endsWith('.jar'));
            const jarFile = jarFiles[0];
            const jarPath = path.join('build/libs', jarFile);
            const stats = fs.statSync(jarPath);
            const sizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
            
            // Ler informações do release se disponível
            let releaseInfo = '';
            try {
              const fs = require('fs');
              if (fs.existsSync('.release_check')) {
                const releaseData = fs.readFileSync('.release_check', 'utf8');
                const lines = releaseData.split('\n');
                const releaseMap = {};
                lines.forEach(line => {
                  const [key, value] = line.split('=');
                  if (key && value) releaseMap[key] = value;
                });
                
                if (releaseMap.RELEASE_NEEDED === 'true' && releaseMap.NEW_VERSION) {
                  releaseInfo = `
                  
                  🔢 **Análise de Release:**
                  📊 **Release necessário:** ${releaseMap.RELEASE_NEEDED}
                  📈 **Nova versão:** ${releaseMap.NEW_VERSION}
                  📋 **Versão anterior:** ${releaseMap.OLD_VERSION}
                  🔍 **Tipo:** ${releaseMap.VERSION_TYPE}
                  📁 **Arquivos relevantes:** ${releaseMap.RELEVANT_FILES}`;
                } else {
                  releaseInfo = `
                  
                  🟢 **Análise de Release:**
                  📊 **Release necessário:** ${releaseMap.RELEASE_NEEDED || 'false'}
                  📋 **Motivo:** Nenhuma mudança relevante detectada`;
                }
              }
            } catch (e) {
              console.log('Não foi possível ler informações do release:', e.message);
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ Build concluído com sucesso!
              
              📦 **JAR criado:** ${jarFile}
              📏 **Tamanho:** ${sizeInMB} MB
              🐳 **Build com:** axwayjbarros/aws-lambda-apim-sdk:1.0.0${releaseInfo}
              
              O JAR está disponível como artifact para download.`
            });
          } catch (error) {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ Build falhou!
              
              Erro: ${error.message}
              
              Verifique os logs para mais detalhes.`
            });
          } 