plugins {
    id 'java'
}

group 'com.axway'
version '1.0.1'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

// Configuração dinâmica do Axway API Gateway
def axway_base = System.getProperty('axway.base', '/opt/axway/Axway-7.7.0.20240830')
def apim_folder = "${axway_base}/apigateway/system"
def ps_folder = "${axway_base}/policystudio"

// Configurações alternativas (descomente se necessário)
//def axway_base_alt = '/opt/axway/Axway-7.7.0.20210830'
//def apim_folder_alt = "${axway_base_alt}/apigateway/system"
//def ps_folder_alt = "${axway_base_alt}/policystudio"

dependencies {
    // AWS SDK - versões testadas e funcionais
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-lambda', version: '1.12.314'
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-core', version: '1.12.314'
    
    // Axway API Gateway libs
    implementation fileTree( dir: "${apim_folder}/lib", include: '*.jar')
    implementation fileTree(dir: "${apim_folder}/lib/modules", include: '*.jar')
    implementation fileTree(dir: "${apim_folder}/lib/plugins", include: '*.jar')
    
    // Policy Studio libs
    implementation fileTree(dir: "${ps_folder}/plugins", include: '*.jar')
    implementation files("${ps_folder}/plugins/com.vordel.rcp.filterbase_7.7.0.v20241023-0911")
}

// Task para instalação no Linux
task installLinux(type: Exec) {
    group = 'Installation'
    description = 'Instala o filtro AWS Lambda no Linux'
    
    dependsOn build
    
    commandLine 'bash', 'scripts/linux/install-filter.sh'
    
    doFirst {
        println "🚀 Instalando filtro AWS Lambda no Linux..."
        println "📁 JAR: build/libs/aws-lambda-apim-sdk-1.0.1.jar"
        println "📁 Gateway: ${axway_base}"
    }
}

// Task para instalação no Windows (apenas arquivos YAML)
task installWindows {
    group = 'Installation'
    description = 'Instala apenas os arquivos YAML no Windows (sem build do JAR)'
    
    doFirst {
        println "🚀 Instalando arquivos YAML do filtro AWS Lambda no Windows..."
        println "📋 Nota: O JAR deve ser buildado no Linux e copiado manualmente"
        println ""
        println "📂 Exemplos de projetos Policy Studio:"
        println "   C:\\Users\\jbarros\\apiprojects\\DIGIO-POC-AKS"
        println "   C:\\Users\\jbarros\\apiprojects\\POC-CUSTOM-FILTER"
        println "   C:\\Projects\\API-Gateway\\MyProject"
        println ""
        
        // Solicitar caminho do projeto Policy Studio
        def projectPath = System.console()?.readLine("📂 Digite o caminho do projeto Policy Studio: ")
        
        if (!projectPath) {
            throw new GradleException("❌ Caminho do projeto não informado!")
        }
        
        // Validar se o caminho existe
        def projectDir = new File(projectPath)
        if (!projectDir.exists()) {
            println "⚠️  Aviso: O diretório não existe. Criando..."
            projectDir.mkdirs()
        }
        
        // Criar estrutura de diretórios
        def metaInfDir = new File(projectPath, "META-INF/types/Entity/Filter/AWSFilter")
        def systemDir = new File(projectPath, "System")
        
        metaInfDir.mkdirs()
        systemDir.mkdirs()
        
        // Copiar arquivos YAML
        def sourceYamlDir = new File("src/main/resources/yaml")
        
        // Copiar AWSLambdaFilter.yaml
        def sourceFilterYaml = new File(sourceYamlDir, "META-INF/types/Entity/Filter/AWSFilter/AWSLambdaFilter.yaml")
        def destFilterYaml = new File(metaInfDir, "AWSLambdaFilter.yaml")
        
        if (sourceFilterYaml.exists()) {
            destFilterYaml.text = sourceFilterYaml.text
            println "✅ Copiado: AWSLambdaFilter.yaml"
        } else {
            println "❌ Arquivo não encontrado: ${sourceFilterYaml.absolutePath}"
        }
        
        // Adicionar conteúdo ao Internationalization Default.yaml
        def sourceIntlYaml = new File(sourceYamlDir, "System/Internationalization Default.yaml")
        def destIntlYaml = new File(systemDir, "Internationalization Default.yaml")
        
        if (sourceIntlYaml.exists()) {
            if (destIntlYaml.exists()) {
                // Adicionar ao final do arquivo existente
                destIntlYaml.append("\n" + sourceIntlYaml.text)
                println "✅ Conteúdo adicionado ao final: Internationalization Default.yaml"
            } else {
                // Criar novo arquivo
                destIntlYaml.text = sourceIntlYaml.text
                println "✅ Criado: Internationalization Default.yaml"
            }
        } else {
            println "❌ Arquivo não encontrado: ${sourceIntlYaml.absolutePath}"
        }
        
        println ""
        println "🎉 Instalação dos arquivos YAML concluída!"
        println "📁 Projeto Policy Studio: ${projectPath}"
        println ""
        println "📋 Próximos passos:"
        println "1. Copie o JAR buildado no Linux para o Windows"
        println "2. Abra o Policy Studio"
        println "3. Vá em Window > Preferences > Runtime Dependencies"
        println "4. Adicione o JAR: aws-lambda-apim-sdk-1.0.1.jar"
        println "5. Reinicie o Policy Studio com -clean"
        println "6. Procure por 'AWS Lambda Filter' na paleta"
    }
}

// Função auxiliar para processar arquivo de internacionalização
def processInternationalizationFile(def sourceFile, def destFile) {
    if (!sourceFile.exists()) {
        println "❌ Arquivo não encontrado: ${sourceFile.absolutePath}"
        return false
    }
    
    def sourceContent = sourceFile.text.trim()
    def destContent = destFile.exists() ? destFile.text : ""
    
    // Verificar se o filtro AWSLambdaFilter já existe no arquivo
    if (destContent.contains("type: AWSLambdaFilter")) {
        println "🔄 Filtro AWSLambdaFilter já existe. Substituindo..."
        
            // Estratégia simples: substituir completamente o arquivo
    destFile.text = sourceContent
        
        println "✅ Seção AWSLambdaFilter atualizada: ${destFile.name}"
        return true
    } else {
        // Adicionar ao final se não existir
        if (destContent.endsWith('\n')) {
            destFile.text = destContent + sourceContent
        } else {
            destFile.text = destContent + '\n' + sourceContent
        }
        println "✅ Conteúdo adicionado ao final: ${destFile.name}"
        return true
    }
}

// Task para instalação Windows com caminho específico
task installWindowsToProject {
    group = 'Installation'
    description = 'Instala YAML em projeto Policy Studio específico'
    
    doFirst {
        println "🚀 Instalando arquivos YAML em projeto específico..."
        println ""
        
        // Obter caminho do projeto via propriedade do sistema
        def projectPath = System.getProperty('project.path')
        
        if (!projectPath) {
            // Se não foi especificado, solicitar interativamente
            projectPath = System.console()?.readLine("📂 Digite o caminho do projeto Policy Studio (ex: C:\\Users\\jbarros\\apiprojects\\DIGIO-POC-AKS): ")
            
            if (!projectPath) {
                throw new GradleException("❌ Caminho do projeto não informado! Use: -Dproject.path=C:\\caminho\\do\\projeto")
            }
        }
        
        println "📁 Projeto: ${projectPath}"
        
        // Executar a mesma lógica da task installWindows
        def projectDir = new File(projectPath)
        if (!projectDir.exists()) {
            println "⚠️  Aviso: O diretório não existe. Criando..."
            projectDir.mkdirs()
        }
        
        def metaInfDir = new File(projectPath, "META-INF/types/Entity/Filter/AWSFilter")
        def systemDir = new File(projectPath, "System")
        
        metaInfDir.mkdirs()
        systemDir.mkdirs()
        
        def sourceYamlDir = new File("src/main/resources/yaml")
        
        def sourceFilterYaml = new File(sourceYamlDir, "META-INF/types/Entity/Filter/AWSFilter/AWSLambdaFilter.yaml")
        def destFilterYaml = new File(metaInfDir, "AWSLambdaFilter.yaml")
        
        if (sourceFilterYaml.exists()) {
            destFilterYaml.text = sourceFilterYaml.text
            println "✅ Copiado: AWSLambdaFilter.yaml"
        } else {
            println "❌ Arquivo não encontrado: ${sourceFilterYaml.absolutePath}"
        }
        
        def sourceIntlYaml = new File(sourceYamlDir, "System/Internationalization Default.yaml")
        def destIntlYaml = new File(systemDir, "Internationalization Default.yaml")
        
        // Processar arquivo de internacionalização com verificação inteligente
        processInternationalizationFile(sourceIntlYaml, destIntlYaml)
        
        println ""
        println "🎉 Instalação concluída no projeto: ${projectPath}"
        println ""
        println "📋 Próximos passos:"
        println "1. Abra o Policy Studio"
        println "2. Vá em Window > Preferences > Runtime Dependencies"
        println "3. Adicione o JAR: aws-lambda-apim-sdk-1.0.1.jar"
        println "4. Reinicie o Policy Studio com -clean"
        println "5. Procure por 'Invoke Lambda Function' na paleta"
    }
}

// Task para build do JAR (apenas Linux)
task buildJarLinux {
    group = 'Build'
    description = 'Build do JAR no Linux (não funciona no Windows)'
    
    dependsOn build
    
    doFirst {
        println "🔨 Build do JAR AWS Lambda Filter..."
        println "📁 JAR: build/libs/aws-lambda-apim-sdk-1.0.1.jar"
        println "⚠️  Nota: Esta task deve ser executada apenas no Linux"
    }
    
    doLast {
        def jarFile = new File("build/libs/aws-lambda-apim-sdk-1.0.1.jar")
        if (jarFile.exists()) {
            println "✅ JAR criado com sucesso: ${jarFile.absolutePath}"
            println "📋 Para Windows: Copie este JAR para o ambiente Windows"
        } else {
            println "❌ Erro: JAR não foi criado"
        }
    }
}

// Task para mostrar informações de download dos JARs AWS
task showAwsJars {
    group = 'Installation'
    description = 'Mostra links para download dos JARs AWS SDK'
    
    doLast {
        println "📦 JARs AWS SDK necessários para Windows:"
        println ""
        println "🔗 aws-java-sdk-lambda-1.12.314.jar:"
        println "   https://repo1.maven.org/maven2/com/amazonaws/aws-java-sdk-lambda/1.12.314/aws-java-sdk-lambda-1.12.314.jar"
        println ""
        println "🔗 aws-java-sdk-core-1.12.314.jar:"
        println "   https://repo1.maven.org/maven2/com/amazonaws/aws-java-sdk-core/1.12.314/aws-java-sdk-core-1.12.314.jar"
        println ""
        println "📋 Após download:"
        println "1. Adicione os JARs ao classpath do Policy Studio"
        println "2. Reinicie o Policy Studio com -clean"
    }
}

// Task para configurar caminho do Axway
task setAxwayPath {
    group = 'Configuration'
    description = 'Configura o caminho do Axway API Gateway'
    
    doLast {
        println "🔧 Configuração do Axway API Gateway"
        println ""
        println "📁 Caminho atual: ${axway_base}"
        println "📁 APIM: ${apim_folder}"
        println "📁 Policy Studio: ${ps_folder}"
        println ""
        println "💡 Para alterar o caminho, use:"
        println "   ./gradlew -Daxway.base=/caminho/para/axway build"
        println "   ./gradlew -Daxway.base=/opt/axway/Axway-7.7.0.20240830 installLinux"
        println ""
        println "📋 Exemplos:"
        println "   ./gradlew -Daxway.base=/opt/axway/Axway-7.7.0.20210830 build"
        println "   ./gradlew -Daxway.base=/home/user/axway/Axway-7.7.0.20240830 installLinux"
    }
}

// Task para mostrar todas as tasks disponíveis
task showTasks {
    group = 'Help'
    description = 'Mostra todas as tasks disponíveis'
    
    doLast {
        println "🚀 Tasks disponíveis:"
        println ""
        println "📦 Build:"
        println "  ./gradlew build                    # Build do projeto (Linux)"
        println "  ./gradlew buildJarLinux           # Build do JAR (apenas Linux)"
        println "  ./gradlew clean build             # Clean + Build"
        println ""
        println "🔧 Configuração:"
        println "  ./gradlew setAxwayPath            # Mostra configuração do Axway"
        println ""
        println "🔧 Instalação Linux:"
        println "  ./gradlew installLinux            # Instala no Linux (JAR + YAML)"
        println "  ./gradlew -Daxway.base=/path installLinux  # Com caminho customizado"
        println ""
        println "🔧 Instalação Windows:"
        println "  ./gradlew installWindows          # Instala YAML no Windows (interativo)"
        println "  ./gradlew -Dproject.path=/path installWindowsToProject  # Instala YAML em projeto específico"
        println "  ./gradlew showAwsJars             # Mostra links dos JARs AWS"
        println ""
        println "❓ Ajuda:"
        println "  ./gradlew showTasks               # Mostra esta lista"
        println "  ./gradlew tasks                   # Lista todas as tasks"
    }
}

