name: Docker Build

on:
  workflow_dispatch:  # Execução manual
  push:
    branches: [ master ]
    paths:
      - 'Dockerfile*'
      - 'scripts/docker/**'

jobs:
  build-docker:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Build JAR
      run: ./gradlew buildJarLinux
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Axway Registry
      uses: docker/login-action@v3
      with:
        registry: docker.repository.axway.com
        username: ${{ secrets.AXWAY_REGISTRY_USERNAME }}
        password: ${{ secrets.AXWAY_REGISTRY_PASSWORD }}
        
    - name: Build Docker image
      run: |
        # Copiar JAR para o contexto do Docker
        cp build/libs/aws-lambda-apim-sdk-*.jar ./
        # Build da imagem
        docker build -t aws-lambda-apim-sdk:${{ github.sha }} .
        docker build -t aws-lambda-apim-sdk:latest .
        # Limpar JAR do contexto
        rm aws-lambda-apim-sdk-*.jar
        
    - name: Test Docker image
      run: |
        # Testar Java
        docker run --rm aws-lambda-apim-sdk:latest java -version
        # Testar nosso SDK
        docker run --rm aws-lambda-apim-sdk:latest ls -la /opt/aws-lambda-sdk/
        # Testar JARs em ext/lib
        docker run --rm aws-lambda-apim-sdk:latest ls -la /opt/Axway/apigateway/groups/emt-group/emt-service/ext/lib/
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'aws-lambda-apim-sdk:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif' 