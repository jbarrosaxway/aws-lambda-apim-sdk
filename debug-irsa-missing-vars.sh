#!/bin/bash

echo "üîç IRSA Debug - Investigando Vari√°veis de Ambiente Ausentes"
echo "============================================================"
echo

# Solicitar informa√ß√µes do usu√°rio
echo "üìã Informa√ß√µes necess√°rias:"
read -p "Namespace do Axway: " NAMESPACE
read -p "Nome do pod Axway (ou parte do nome): " POD_NAME_PATTERN

echo
echo "üîç 1. Verificando ServiceAccount do pod..."
echo "============================================"

# Encontrar o pod
POD_NAME=$(kubectl get pods -n $NAMESPACE | grep $POD_NAME_PATTERN | head -1 | awk '{print $1}')

if [ -z "$POD_NAME" ]; then
    echo "‚ùå Pod n√£o encontrado com padr√£o: $POD_NAME_PATTERN"
    echo "üìã Pods dispon√≠veis no namespace $NAMESPACE:"
    kubectl get pods -n $NAMESPACE
    exit 1
fi

echo "‚úÖ Pod encontrado: $POD_NAME"

# Verificar ServiceAccount do pod
echo
echo "üîç 2. ServiceAccount usado pelo pod:"
SERVICE_ACCOUNT=$(kubectl get pod $POD_NAME -n $NAMESPACE -o jsonpath='{.spec.serviceAccountName}')
echo "ServiceAccount: ${SERVICE_ACCOUNT:-default}"

# Verificar anota√ß√µes do ServiceAccount
echo
echo "üîç 3. Anota√ß√µes do ServiceAccount:"
echo "=================================="
kubectl get serviceaccount ${SERVICE_ACCOUNT:-default} -n $NAMESPACE -o yaml | grep -A 10 "annotations:"

# Verificar se o Role ARN est√° anotado
ROLE_ARN=$(kubectl get serviceaccount ${SERVICE_ACCOUNT:-default} -n $NAMESPACE -o jsonpath='{.metadata.annotations.eks\.amazonaws\.com/role-arn}')
echo
echo "üéØ Role ARN anotado: ${ROLE_ARN:-‚ùå N√ÉO ENCONTRADO}"

# Verificar vari√°veis de ambiente do pod
echo
echo "üîç 4. Vari√°veis de ambiente IRSA no pod:"
echo "========================================"
echo "Executando: kubectl exec $POD_NAME -n $NAMESPACE -- env | grep AWS"
kubectl exec $POD_NAME -n $NAMESPACE -- env | grep AWS || echo "‚ùå Nenhuma vari√°vel AWS encontrada"

# Verificar se o webhook de muta√ß√£o est√° funcionando
echo
echo "üîç 5. Verificando webhook de muta√ß√£o IRSA:"
echo "=========================================="
echo "Volumes montados no pod:"
kubectl get pod $POD_NAME -n $NAMESPACE -o jsonpath='{.spec.volumes[*].name}' | tr ' ' '\n' | grep -E "(aws|token)" || echo "‚ùå Nenhum volume AWS/token encontrado"

echo
echo "Mounts do container:"
kubectl get pod $POD_NAME -n $NAMESPACE -o jsonpath='{.spec.containers[0].volumeMounts[*].mountPath}' | tr ' ' '\n' | grep -E "(aws|token)" || echo "‚ùå Nenhum mount AWS/token encontrado"

# Verificar se o EKS Pod Identity Webhook est√° instalado
echo
echo "üîç 6. Verificando webhook EKS IRSA:"
echo "==================================="
kubectl get mutatingwebhookconfigurations | grep -E "(irsa|eks|pod-identity)" || echo "‚ùå Webhook IRSA n√£o encontrado"

# Verificar logs recentes do pod
echo
echo "üîç 7. Logs recentes do pod (√∫ltimas 10 linhas):"
echo "==============================================="
kubectl logs $POD_NAME -n $NAMESPACE --tail=10 | grep -E "(AWS|IRSA|identity|token)" || echo "‚ùå Nenhum log AWS/IRSA encontrado"

echo
echo "üìã Resumo do Diagn√≥stico:"
echo "========================"
echo "Pod: $POD_NAME"
echo "Namespace: $NAMESPACE" 
echo "ServiceAccount: ${SERVICE_ACCOUNT:-default}"
echo "Role ARN: ${ROLE_ARN:-‚ùå N√ÉO CONFIGURADO}"
echo
echo "üìù Pr√≥ximos Passos:"
echo "==================="

if [ -z "$ROLE_ARN" ]; then
    echo "1. ‚ùå PROBLEMA: ServiceAccount n√£o tem anota√ß√£o eks.amazonaws.com/role-arn"
    echo "   Solu√ß√£o: kubectl annotate serviceaccount ${SERVICE_ACCOUNT:-default} -n $NAMESPACE eks.amazonaws.com/role-arn=arn:aws:iam::ACCOUNT:role/ROLE-NAME"
    echo
    echo "2. üîÑ Reiniciar o pod ap√≥s anotar o ServiceAccount"
    echo "   kubectl delete pod $POD_NAME -n $NAMESPACE"
    echo
else
    echo "1. ‚úÖ ServiceAccount configurado com Role ARN"
    echo "2. ‚ùå PROBLEMA: Webhook de muta√ß√£o n√£o est√° injetando as vari√°veis"
    echo "   Verificar se o EKS IRSA webhook est√° funcionando"
    echo
fi

echo "3. üìñ Verificar documenta√ß√£o IRSA:"
echo "   https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html"