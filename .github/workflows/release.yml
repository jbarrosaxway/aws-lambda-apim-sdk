name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Pull published Docker image
      run: |
        # Pull da imagem publicada
        docker pull axwayjbarros/aws-lambda-apim-sdk:1.0.0
        
    - name: Build JAR using published image
      run: |
        # Executar build do JAR usando a imagem publicada
        docker run --rm \
          -v "$(pwd):/workspace" \
          -v "$(pwd)/build:/workspace/build" \
          -v "$(pwd)/.gradle:/workspace/.gradle" \
          -w /workspace \
          axwayjbarros/aws-lambda-apim-sdk:1.0.0 \
          bash -c "
            echo 'üîß Configurando ambiente...'
            export JAVA_HOME=/opt/java/openjdk-11
            export PATH=\$JAVA_HOME/bin:\$PATH
            
            echo 'üì¶ Verificando Java...'
            java -version
            
            echo 'üì¶ Verificando Gradle...'
            gradle --version || echo 'Gradle n√£o encontrado, instalando...'
            
            echo 'üî® Executando build...'
            gradle clean build
            
            echo 'üìã Verificando resultado...'
            ls -la build/libs/ || echo 'Diret√≥rio build/libs n√£o encontrado'
          "
          
    - name: Generate changelog
      id: changelog
      run: |
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        git log --oneline $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Changes in this Release
          
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Build Information
          
          This release was built using the Docker image `axwayjbarros/aws-lambda-apim-sdk:1.0.0` which contains:
          - Axway API Gateway 7.7.0.20240830
          - Java 11 OpenJDK
          - AWS SDK for Java 1.12.314
          - All necessary dependencies for building the filter
          
          ## Installation
          
          Download the JAR file from the assets below and follow the installation guide in the README.
          
          ### Docker Installation
          
          ```bash
          # Pull the Docker image
          docker pull axwayjbarros/aws-lambda-apim-sdk:1.0.0
          
          # Run with docker-compose
          docker-compose up -d
          ```
          
          ## Usage
          
          This JAR contains the AWS Lambda integration for Axway API Gateway. 
          Follow the installation guide in the README for setup instructions.
        draft: false
        prerelease: false
        
    - name: Upload JAR to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/libs/aws-lambda-apim-sdk-*.jar
        asset_name: aws-lambda-apim-sdk-${{ github.ref_name }}.jar
        asset_content_type: application/java-archive
        
    - name: Test JAR
      run: |
        # Verificar se o JAR foi criado
        echo "üîç Verificando JAR criado..."
        ls -la build/libs/aws-lambda-apim-sdk-*.jar || echo "‚ùå JAR n√£o encontrado"
        
        # Verificar conte√∫do do JAR
        echo "üìã Conte√∫do do JAR:"
        jar -tf build/libs/aws-lambda-apim-sdk-*.jar | head -10 || echo "‚ùå N√£o foi poss√≠vel verificar conte√∫do"
        
        # Verificar tamanho do JAR
        echo "üìè Tamanho do JAR:"
        du -h build/libs/aws-lambda-apim-sdk-*.jar || echo "‚ùå N√£o foi poss√≠vel verificar tamanho"
        
        # Verificar se o JAR cont√©m as classes principais
        echo "üîç Verificando classes principais..."
        jar -tf build/libs/aws-lambda-apim-sdk-*.jar | grep -E "(AWSLambdaFilter|AWSLambdaProcessor)" || echo "‚ùå Classes principais n√£o encontradas" 